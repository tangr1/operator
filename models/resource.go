package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*表示资源

swagger:model Resource
*/
type Resource struct {

	/* 创建者
	 */
	CreateBy string `json:"createBy,omitempty"`

	/* 创建时间
	 */
	CreateTime int64 `json:"createTime,omitempty"`

	/* 资源ID
	 */
	ID int64 `json:"id,omitempty"`

	/* 当前用户对此资源的权限列表, 0为GET, 1为UPDATE, 2为DELETE
	 */
	Permissions []int32 `json:"permissions,omitempty"`

	/* 可读创建时间
	 */
	ReadableCreateTime string `json:"readableCreateTime,omitempty"`

	/* 可读更新时间
	 */
	ReadableUpdateTime string `json:"readableUpdateTime,omitempty"`

	/* 服务器当前时间
	 */
	ServerTime int64 `json:"serverTime,omitempty"`

	/* 更新者
	 */
	UpdateBy string `json:"updateBy,omitempty"`

	/* 最近一次修改时间
	 */
	UpdateTime int64 `json:"updateTime,omitempty"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {

		if err := validate.Required("permissions"+"."+strconv.Itoa(i), "body", int32(m.Permissions[i])); err != nil {
			return err
		}

	}

	return nil
}
