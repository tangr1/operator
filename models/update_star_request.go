package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*表示更新明星资源

swagger:model UpdateStarRequest
*/
type UpdateStarRequest struct {

	/* 明星专家
	 */
	Experts []int64 `json:"experts,omitempty"`

	/* 明星企业
	 */
	Startups []int64 `json:"startups,omitempty"`
}

// Validate validates this update star request
func (m *UpdateStarRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExperts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStarRequest) validateExperts(formats strfmt.Registry) error {

	if swag.IsZero(m.Experts) { // not required
		return nil
	}

	for i := 0; i < len(m.Experts); i++ {

		if err := validate.Required("experts"+"."+strconv.Itoa(i), "body", int64(m.Experts[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpdateStarRequest) validateStartups(formats strfmt.Registry) error {

	if swag.IsZero(m.Startups) { // not required
		return nil
	}

	for i := 0; i < len(m.Startups); i++ {

		if err := validate.Required("startups"+"."+strconv.Itoa(i), "body", int64(m.Startups[i])); err != nil {
			return err
		}

	}

	return nil
}
