package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*表示创建创业公司请求

swagger:model CreateStartupRequest
*/
type CreateStartupRequest struct {

	/* 创业公司许可证

	Max Length: 200
	*/
	Certificate string `json:"certificate,omitempty"`

	/* 创业公司城市
	 */
	City int32 `json:"city,omitempty"`

	/* 封面图片

	Max Length: 200
	*/
	CoverImage string `json:"coverImage,omitempty"`

	/* 封面标题

	Max Length: 100
	*/
	CoverTitle string `json:"coverTitle,omitempty"`

	/* 创业公司ctocoins

	Minimum: 0
	*/
	CtoCoins int32 `json:"ctoCoins,omitempty"`

	/* 创业公司介绍

	Max Length: 255
	*/
	Description string `json:"description,omitempty"`

	/* 创业公司经营范围
	 */
	Domain int32 `json:"domain,omitempty"`

	/* 创始人
	 */
	Founders []*Founder `json:"founders,omitempty"`

	/* 创业公司网址

	Max Length: 100
	*/
	Homepage string `json:"homepage,omitempty"`

	/* 创业公司融资阶段
	 */
	InvestmentStatus int32 `json:"investmentStatus,omitempty"`

	/* 投资人
	 */
	Investors []string `json:"investors,omitempty"`

	/* 创业公司Logo图片地址

	Max Length: 200
	*/
	Logo string `json:"logo,omitempty"`

	/* 创业公司名称

	Max Length: 100
	*/
	Name string `json:"name,omitempty"`

	/* 产品
	 */
	Products []*Product `json:"products,omitempty"`

	/* 创业公司省份
	 */
	Province int32 `json:"province,omitempty"`

	/* 创业公司注册名称

	Max Length: 100
	*/
	RegistrationName string `json:"registrationName,omitempty"`

	/* 创业公司运营状态
	 */
	RunningStatus int32 `json:"runningStatus,omitempty"`

	/* 员工人数
	 */
	StaffNumber int32 `json:"staffNumber,omitempty"`

	/* 创业公司创始月份

	Maximum: 12
	*/
	StartMonth int32 `json:"startMonth,omitempty"`

	/* 创业公司创始年份

	Maximum: 2020
	*/
	StartYear int32 `json:"startYear,omitempty"`
}

// Validate validates this create startup request
func (m *CreateStartupRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCoverImage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCoverTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCtoCoins(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFounders(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHomepage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvestors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegistrationName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartMonth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartYear(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateStartupRequest) validateCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if err := validate.MaxLength("certificate", "body", string(m.Certificate), 200); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateCoverImage(formats strfmt.Registry) error {

	if swag.IsZero(m.CoverImage) { // not required
		return nil
	}

	if err := validate.MaxLength("coverImage", "body", string(m.CoverImage), 200); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateCoverTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.CoverTitle) { // not required
		return nil
	}

	if err := validate.MaxLength("coverTitle", "body", string(m.CoverTitle), 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateCtoCoins(formats strfmt.Registry) error {

	if swag.IsZero(m.CtoCoins) { // not required
		return nil
	}

	if err := validate.Minimum("ctoCoins", "body", float64(m.CtoCoins), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateFounders(formats strfmt.Registry) error {

	if swag.IsZero(m.Founders) { // not required
		return nil
	}

	for i := 0; i < len(m.Founders); i++ {

		if m.Founders[i] != nil {

			if err := m.Founders[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CreateStartupRequest) validateHomepage(formats strfmt.Registry) error {

	if swag.IsZero(m.Homepage) { // not required
		return nil
	}

	if err := validate.MaxLength("homepage", "body", string(m.Homepage), 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateInvestors(formats strfmt.Registry) error {

	if swag.IsZero(m.Investors) { // not required
		return nil
	}

	for i := 0; i < len(m.Investors); i++ {

		if err := validate.Required("investors"+"."+strconv.Itoa(i), "body", string(m.Investors[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *CreateStartupRequest) validateLogo(formats strfmt.Registry) error {

	if swag.IsZero(m.Logo) { // not required
		return nil
	}

	if err := validate.MaxLength("logo", "body", string(m.Logo), 200); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateProducts(formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {

		if m.Products[i] != nil {

			if err := m.Products[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CreateStartupRequest) validateRegistrationName(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistrationName) { // not required
		return nil
	}

	if err := validate.MaxLength("registrationName", "body", string(m.RegistrationName), 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.StartMonth) { // not required
		return nil
	}

	if err := validate.Maximum("startMonth", "body", float64(m.StartMonth), 12, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateStartupRequest) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(m.StartYear) { // not required
		return nil
	}

	if err := validate.Maximum("startYear", "body", float64(m.StartYear), 2020, false); err != nil {
		return err
	}

	return nil
}
