package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*表示创建推荐资源

swagger:model CreateRecommendationRequest
*/
type CreateRecommendationRequest struct {

	/* 推荐对象名称

	Max Length: 100
	*/
	Name string `json:"name,omitempty"`

	/* Photo photo

	Max Length: 200
	*/
	Photo string `json:"photo,omitempty"`

	/* 推荐对象职位

	Max Length: 100
	*/
	Position string `json:"position,omitempty"`

	/* 推荐语

	Max Length: 1024
	*/
	Words string `json:"words,omitempty"`
}

// Validate validates this create recommendation request
func (m *CreateRecommendationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhoto(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWords(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRecommendationRequest) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecommendationRequest) validatePhoto(formats strfmt.Registry) error {

	if swag.IsZero(m.Photo) { // not required
		return nil
	}

	if err := validate.MaxLength("photo", "body", string(m.Photo), 200); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecommendationRequest) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := validate.MaxLength("position", "body", string(m.Position), 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecommendationRequest) validateWords(formats strfmt.Registry) error {

	if swag.IsZero(m.Words) { // not required
		return nil
	}

	if err := validate.MaxLength("words", "body", string(m.Words), 1024); err != nil {
		return err
	}

	return nil
}
