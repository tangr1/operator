package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*表示创建主题请求

swagger:model CreateTopicRequest
*/
type CreateTopicRequest struct {

	/* 主题类别

	Required: true
	*/
	Category int32 `json:"category,omitempty"`

	/* 发布内容

	Max Length: 65535
	*/
	Content string `json:"content,omitempty"`

	/* 主题悬赏分

	Required: true
	Minimum: 10
	*/
	CtoCoins int32 `json:"ctoCoins,omitempty"`

	/* 主题发布者所属创业公司
	 */
	StartupID int64 `json:"startupId,omitempty"`

	/* 摘要

	Max Length: 100
	*/
	Summary string `json:"summary,omitempty"`

	/* 主题标签
	 */
	Tags []string `json:"tags,omitempty"`

	/* 发布标题

	Required: true
	Max Length: 255
	*/
	Title string `json:"title,omitempty"`
}

// Validate validates this create topic request
func (m *CreateTopicRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCtoCoins(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTopicRequest) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", int32(m.Category)); err != nil {
		return err
	}

	return nil
}

func (m *CreateTopicRequest) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	if err := validate.MaxLength("content", "body", string(m.Content), 65535); err != nil {
		return err
	}

	return nil
}

func (m *CreateTopicRequest) validateCtoCoins(formats strfmt.Registry) error {

	if err := validate.Required("ctoCoins", "body", int32(m.CtoCoins)); err != nil {
		return err
	}

	if err := validate.Minimum("ctoCoins", "body", float64(m.CtoCoins), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateTopicRequest) validateSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if err := validate.MaxLength("summary", "body", string(m.Summary), 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateTopicRequest) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.Required("tags"+"."+strconv.Itoa(i), "body", string(m.Tags[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *CreateTopicRequest) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", string(m.Title)); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 255); err != nil {
		return err
	}

	return nil
}
