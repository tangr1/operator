package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*表示CSEC验证请求

swagger:model CsecCheckRequest
*/
type CsecCheckRequest struct {

	/* 业务ID

	Required: true
	*/
	BusinessID int32 `json:"businessId,omitempty"`

	/* 验证码类型

	Required: true
	*/
	Captype int32 `json:"captype,omitempty"`

	/* 场景ID

	Required: true
	*/
	SceneID int32 `json:"sceneId,omitempty"`

	/* 验证码票据

	Required: true
	*/
	Ticket string `json:"ticket,omitempty"`

	/* 用户ID

	Required: true
	*/
	UserID int32 `json:"userId,omitempty"`

	/* 用户IP

	Required: true
	*/
	UserIP string `json:"userIp,omitempty"`
}

// Validate validates this csec check request
func (m *CsecCheckRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCaptype(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSceneID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTicket(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CsecCheckRequest) validateBusinessID(formats strfmt.Registry) error {

	if err := validate.Required("businessId", "body", int32(m.BusinessID)); err != nil {
		return err
	}

	return nil
}

func (m *CsecCheckRequest) validateCaptype(formats strfmt.Registry) error {

	if err := validate.Required("captype", "body", int32(m.Captype)); err != nil {
		return err
	}

	return nil
}

func (m *CsecCheckRequest) validateSceneID(formats strfmt.Registry) error {

	if err := validate.Required("sceneId", "body", int32(m.SceneID)); err != nil {
		return err
	}

	return nil
}

func (m *CsecCheckRequest) validateTicket(formats strfmt.Registry) error {

	if err := validate.Required("ticket", "body", string(m.Ticket)); err != nil {
		return err
	}

	return nil
}

func (m *CsecCheckRequest) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", int32(m.UserID)); err != nil {
		return err
	}

	return nil
}

func (m *CsecCheckRequest) validateUserIP(formats strfmt.Registry) error {

	if err := validate.Required("userIp", "body", string(m.UserIP)); err != nil {
		return err
	}

	return nil
}
