package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*表示发送邮件请求

swagger:model SendMailRequest
*/
type SendMailRequest struct {

	/* 正文
	 */
	Body string `json:"body,omitempty"`

	/* 抄送人
	 */
	Cc []string `json:"cc,omitempty"`

	/* 标题

	Max Length: 100
	*/
	Subject string `json:"subject,omitempty"`

	/* 收件人
	 */
	To []string `json:"to,omitempty"`
}

// Validate validates this send mail request
func (m *SendMailRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCc(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendMailRequest) validateCc(formats strfmt.Registry) error {

	if swag.IsZero(m.Cc) { // not required
		return nil
	}

	for i := 0; i < len(m.Cc); i++ {

		if err := validate.Required("cc"+"."+strconv.Itoa(i), "body", string(m.Cc[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *SendMailRequest) validateSubject(formats strfmt.Registry) error {

	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if err := validate.MaxLength("subject", "body", string(m.Subject), 100); err != nil {
		return err
	}

	return nil
}

func (m *SendMailRequest) validateTo(formats strfmt.Registry) error {

	if swag.IsZero(m.To) { // not required
		return nil
	}

	for i := 0; i < len(m.To); i++ {

		if err := validate.Required("to"+"."+strconv.Itoa(i), "body", string(m.To[i])); err != nil {
			return err
		}

	}

	return nil
}
