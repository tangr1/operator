package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*表示更新回复请求

swagger:model UpdateReplyRequest
*/
type UpdateReplyRequest struct {

	/* 是否匿名发布
	 */
	Anonymous *bool `json:"anonymous,omitempty"`

	/* 发布内容

	Max Length: 65535
	*/
	Content string `json:"content,omitempty"`

	/* 发布标题

	Max Length: 255
	*/
	Title string `json:"title,omitempty"`
}

// Validate validates this update reply request
func (m *UpdateReplyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateReplyRequest) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	if err := validate.MaxLength("content", "body", string(m.Content), 65535); err != nil {
		return err
	}

	return nil
}

func (m *UpdateReplyRequest) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 255); err != nil {
		return err
	}

	return nil
}
