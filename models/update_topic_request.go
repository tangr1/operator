package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*表示更新主题请求

swagger:model UpdateTopicRequest
*/
type UpdateTopicRequest struct {

	/* 主题类别
	 */
	Category int32 `json:"category,omitempty"`

	/* 发布内容

	Max Length: 65535
	*/
	Content string `json:"content,omitempty"`

	/* 拒绝删除原因
	 */
	RejectReason string `json:"rejectReason,omitempty"`

	/* 发布者采纳回复时的评论

	Max Length: 255
	*/
	ResolvedComment string `json:"resolvedComment,omitempty"`

	/* 采纳的回复ID
	 */
	ResolvedReplyID int64 `json:"resolvedReplyId,omitempty"`

	/* 主题发布者所属创业公司
	 */
	StartupID int64 `json:"startupId,omitempty"`

	/* 状态
	 */
	Status int32 `json:"status,omitempty"`

	/* 摘要

	Max Length: 100
	*/
	Summary string `json:"summary,omitempty"`

	/* 主题标签
	 */
	Tags []string `json:"tags,omitempty"`

	/* 发布标题

	Max Length: 255
	*/
	Title string `json:"title,omitempty"`
}

// Validate validates this update topic request
func (m *UpdateTopicRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResolvedComment(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTopicRequest) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	if err := validate.MaxLength("content", "body", string(m.Content), 65535); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTopicRequest) validateResolvedComment(formats strfmt.Registry) error {

	if swag.IsZero(m.ResolvedComment) { // not required
		return nil
	}

	if err := validate.MaxLength("resolvedComment", "body", string(m.ResolvedComment), 255); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTopicRequest) validateSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if err := validate.MaxLength("summary", "body", string(m.Summary), 100); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTopicRequest) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.Required("tags"+"."+strconv.Itoa(i), "body", string(m.Tags[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpdateTopicRequest) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 255); err != nil {
		return err
	}

	return nil
}
