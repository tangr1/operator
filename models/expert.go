package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*表示专家资源

swagger:model Expert
*/
type Expert struct {
	User

	/* 被采纳的答案数
	 */
	AcceptedReplyCount int32 `json:"acceptedReplyCount,omitempty"`

	/* 城市id
	 */
	City int32 `json:"city,omitempty"`

	/* 专家任职公司
	 */
	Company string `json:"company,omitempty"`

	/* 封面图片
	 */
	CoverImage string `json:"coverImage,omitempty"`

	/* 封面标题
	 */
	CoverTitle string `json:"coverTitle,omitempty"`

	/* 拥有的悬赏分
	 */
	CtoCoins int32 `json:"ctoCoins,omitempty"`

	/* 专家特长
	 */
	Expertise []int32 `json:"expertise,omitempty"`

	/* 帮助过的企业列表
	 */
	HelpedStartups []Startup `json:"helpedStartups,omitempty"`

	/* 是否为内部专家
	 */
	Internal *bool `json:"internal,omitempty"`

	/* 可邀请的专家数
	 */
	InviteQuota int32 `json:"inviteQuota,omitempty"`

	/* 已邀请的专家数
	 */
	InviteUsed int32 `json:"inviteUsed,omitempty"`

	/* 专家管理技能
	 */
	ManagementSkill int32 `json:"managementSkill,omitempty"`

	/* 评论被评论时邮件通知
	 */
	NotifyCommentNewCommentByEmail *bool `json:"notifyCommentNewCommentByEmail,omitempty"`

	/* 评论被评论时推送通知
	 */
	NotifyCommentNewCommentByPush *bool `json:"notifyCommentNewCommentByPush,omitempty"`

	/* 新主题邮件通知
	 */
	NotifyNewTopicByEmail *bool `json:"notifyNewTopicByEmail,omitempty"`

	/* 新主题推送通知
	 */
	NotifyNewTopicByPush *bool `json:"notifyNewTopicByPush,omitempty"`

	/* 是否只在空闲时间通知
	 */
	NotifyOnlyFreeTime *bool `json:"notifyOnlyFreeTime,omitempty"`

	/* 有回复被采纳时邮件通知
	 */
	NotifyReplyAcceptedByEmail *bool `json:"notifyReplyAcceptedByEmail,omitempty"`

	/* 有回复被采纳时推送通知
	 */
	NotifyReplyAcceptedByPush *bool `json:"notifyReplyAcceptedByPush,omitempty"`

	/* 答案或评论被评论时邮件通知
	 */
	NotifyReplyNewCommentByEmail *bool `json:"notifyReplyNewCommentByEmail,omitempty"`

	/* 答案或评论被评论时推送通知
	 */
	NotifyReplyNewCommentByPush *bool `json:"notifyReplyNewCommentByPush,omitempty"`

	/* 专家职位
	 */
	Position string `json:"position,omitempty"`

	/* 答案数
	 */
	ReplyCount int32 `json:"replyCount,omitempty"`

	/* 专家威望
	 */
	Reputation int32 `json:"reputation,omitempty"`

	/* 申请状态
	 */
	ReviewStatus int32 `json:"reviewStatus,omitempty"`
}

// Validate validates this expert
func (m *Expert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.User.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpertise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelpedStartups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Expert) validateExpertise(formats strfmt.Registry) error {

	for i := 0; i < len(m.Expertise); i++ {

		if err := validate.Required("expertise"+"."+strconv.Itoa(i), "body", int32(m.Expertise[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *Expert) validateHelpedStartups(formats strfmt.Registry) error {

	for i := 0; i < len(m.HelpedStartups); i++ {

		if err := m.HelpedStartups[i].Validate(formats); err != nil {
			return err
		}

	}

	return nil
}
