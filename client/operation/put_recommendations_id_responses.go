package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type PutRecommendationsIDReader struct {
	formats strfmt.Registry
}

func (o *PutRecommendationsIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutRecommendationsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutRecommendationsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutRecommendationsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutRecommendationsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutRecommendationsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutRecommendationsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutRecommendationsIDOK creates a PutRecommendationsIDOK with default headers values
func NewPutRecommendationsIDOK() *PutRecommendationsIDOK {
	return &PutRecommendationsIDOK{}
}

/*PutRecommendationsIDOK

成功更新推荐
*/
type PutRecommendationsIDOK struct {
	Payload *models.Recommendation
}

func (o *PutRecommendationsIDOK) Error() string {
	return fmt.Sprintf("[PUT /recommendations/{id}/][%d] putRecommendationsIdOK  %+v", 200, o.Payload)
}

func (o *PutRecommendationsIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Recommendation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutRecommendationsIDBadRequest creates a PutRecommendationsIDBadRequest with default headers values
func NewPutRecommendationsIDBadRequest() *PutRecommendationsIDBadRequest {
	return &PutRecommendationsIDBadRequest{}
}

/*PutRecommendationsIDBadRequest

无效请求
*/
type PutRecommendationsIDBadRequest struct {
	Payload *models.Error
}

func (o *PutRecommendationsIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /recommendations/{id}/][%d] putRecommendationsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutRecommendationsIDBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutRecommendationsIDUnauthorized creates a PutRecommendationsIDUnauthorized with default headers values
func NewPutRecommendationsIDUnauthorized() *PutRecommendationsIDUnauthorized {
	return &PutRecommendationsIDUnauthorized{}
}

/*PutRecommendationsIDUnauthorized

未认证
*/
type PutRecommendationsIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutRecommendationsIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /recommendations/{id}/][%d] putRecommendationsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRecommendationsIDUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutRecommendationsIDForbidden creates a PutRecommendationsIDForbidden with default headers values
func NewPutRecommendationsIDForbidden() *PutRecommendationsIDForbidden {
	return &PutRecommendationsIDForbidden{}
}

/*PutRecommendationsIDForbidden

无访问权限
*/
type PutRecommendationsIDForbidden struct {
	Payload *models.Error
}

func (o *PutRecommendationsIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /recommendations/{id}/][%d] putRecommendationsIdForbidden  %+v", 403, o.Payload)
}

func (o *PutRecommendationsIDForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutRecommendationsIDNotFound creates a PutRecommendationsIDNotFound with default headers values
func NewPutRecommendationsIDNotFound() *PutRecommendationsIDNotFound {
	return &PutRecommendationsIDNotFound{}
}

/*PutRecommendationsIDNotFound

没找到指定对象
*/
type PutRecommendationsIDNotFound struct {
	Payload *models.Error
}

func (o *PutRecommendationsIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /recommendations/{id}/][%d] putRecommendationsIdNotFound  %+v", 404, o.Payload)
}

func (o *PutRecommendationsIDNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutRecommendationsIDInternalServerError creates a PutRecommendationsIDInternalServerError with default headers values
func NewPutRecommendationsIDInternalServerError() *PutRecommendationsIDInternalServerError {
	return &PutRecommendationsIDInternalServerError{}
}

/*PutRecommendationsIDInternalServerError

服务端内部错误
*/
type PutRecommendationsIDInternalServerError struct {
	Payload *models.Error
}

func (o *PutRecommendationsIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /recommendations/{id}/][%d] putRecommendationsIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRecommendationsIDInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
