package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new operation API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operation API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*删除推荐

删除指定推荐

*/
func (a *Client) DeleteRecommendationsID(params *DeleteRecommendationsIDParams, authInfo client.AuthInfoWriter) (*DeleteRecommendationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecommendationsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "DeleteRecommendationsID",
		Params:   params,
		Reader:   &DeleteRecommendationsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRecommendationsIDOK), nil
}

/*删除明星

删除指定明星

*/
func (a *Client) DeleteStarsID(params *DeleteStarsIDParams, authInfo client.AuthInfoWriter) (*DeleteStarsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStarsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "DeleteStarsID",
		Params:   params,
		Reader:   &DeleteStarsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStarsIDOK), nil
}

/*查看反馈列表

查看所有反馈，支持分页和过滤器

*/
func (a *Client) GetFeedbacks(params *GetFeedbacksParams, authInfo client.AuthInfoWriter) (*GetFeedbacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedbacksParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetFeedbacks",
		Params:   params,
		Reader:   &GetFeedbacksReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeedbacksOK), nil
}

/*查询反馈

得到指定反馈的具体信息

*/
func (a *Client) GetFeedbacksID(params *GetFeedbacksIDParams, authInfo client.AuthInfoWriter) (*GetFeedbacksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeedbacksIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetFeedbacksID",
		Params:   params,
		Reader:   &GetFeedbacksIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeedbacksIDOK), nil
}

/*查看推荐列表

查看所有推荐，支持分页和过滤器

*/
func (a *Client) GetRecommendations(params *GetRecommendationsParams, authInfo client.AuthInfoWriter) (*GetRecommendationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecommendationsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetRecommendations",
		Params:   params,
		Reader:   &GetRecommendationsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecommendationsOK), nil
}

/*查询推荐

得到指定推荐的具体信息

*/
func (a *Client) GetRecommendationsID(params *GetRecommendationsIDParams, authInfo client.AuthInfoWriter) (*GetRecommendationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecommendationsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetRecommendationsID",
		Params:   params,
		Reader:   &GetRecommendationsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecommendationsIDOK), nil
}

/*查询明星

得到指定明星的具体信息

*/
func (a *Client) GetStarsID(params *GetStarsIDParams, authInfo client.AuthInfoWriter) (*GetStarsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStarsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetStarsID",
		Params:   params,
		Reader:   &GetStarsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStarsIDOK), nil
}

/*查询最新明星

得到指定明星的具体信息

*/
func (a *Client) GetStarsLatest(params *GetStarsLatestParams, authInfo client.AuthInfoWriter) (*GetStarsLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStarsLatestParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetStarsLatest",
		Params:   params,
		Reader:   &GetStarsLatestReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStarsLatestOK), nil
}

/*创建反馈

根据请求创建反馈

*/
func (a *Client) PostFeedbacks(params *PostFeedbacksParams, authInfo client.AuthInfoWriter) (*PostFeedbacksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFeedbacksParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostFeedbacks",
		Params:   params,
		Reader:   &PostFeedbacksReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFeedbacksCreated), nil
}

/*创建推荐

根据请求创建推荐

*/
func (a *Client) PostRecommendations(params *PostRecommendationsParams, authInfo client.AuthInfoWriter) (*PostRecommendationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRecommendationsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostRecommendations",
		Params:   params,
		Reader:   &PostRecommendationsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRecommendationsCreated), nil
}

/*创建明星

根据请求创建明星

*/
func (a *Client) PostStars(params *PostStarsParams, authInfo client.AuthInfoWriter) (*PostStarsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStarsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostStars",
		Params:   params,
		Reader:   &PostStarsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStarsCreated), nil
}

/*更新推荐

根据请求中指定要更新的属性对推荐进行更新

*/
func (a *Client) PutRecommendationsID(params *PutRecommendationsIDParams, authInfo client.AuthInfoWriter) (*PutRecommendationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRecommendationsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PutRecommendationsID",
		Params:   params,
		Reader:   &PutRecommendationsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRecommendationsIDOK), nil
}

/*更新明星

根据请求中指定要更新的属性对明星进行更新

*/
func (a *Client) PutStarsID(params *PutStarsIDParams, authInfo client.AuthInfoWriter) (*PutStarsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutStarsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PutStarsID",
		Params:   params,
		Reader:   &PutStarsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutStarsIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
