package reply

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new reply API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reply API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*删除回复

删除指定回复

*/
func (a *Client) DeleteRepliesID(params *DeleteRepliesIDParams, authInfo client.AuthInfoWriter) (*DeleteRepliesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepliesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "DeleteRepliesID",
		Params:   params,
		Reader:   &DeleteRepliesIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRepliesIDOK), nil
}

/*查看回复列表

查看所有回复，支持分页和过滤器

*/
func (a *Client) GetReplies(params *GetRepliesParams, authInfo client.AuthInfoWriter) (*GetRepliesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepliesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetReplies",
		Params:   params,
		Reader:   &GetRepliesReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepliesOK), nil
}

/*查询回复

得到指定回复的具体信息

*/
func (a *Client) GetRepliesID(params *GetRepliesIDParams, authInfo client.AuthInfoWriter) (*GetRepliesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepliesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetRepliesID",
		Params:   params,
		Reader:   &GetRepliesIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepliesIDOK), nil
}

/*创建回复

根据请求创建回复

*/
func (a *Client) PostReplies(params *PostRepliesParams, authInfo client.AuthInfoWriter) (*PostRepliesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepliesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostReplies",
		Params:   params,
		Reader:   &PostRepliesReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRepliesCreated), nil
}

/*更新回复

根据请求中指定要更新的属性对回复进行更新

*/
func (a *Client) PutRepliesID(params *PutRepliesIDParams, authInfo client.AuthInfoWriter) (*PutRepliesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepliesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PutRepliesID",
		Params:   params,
		Reader:   &PutRepliesIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRepliesIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
