package reply

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewGetRepliesParams creates a new GetRepliesParams object
// with the default values initialized.
func NewGetRepliesParams() *GetRepliesParams {
	return &GetRepliesParams{}
}

/*GetRepliesParams contains all the parameters to send to the API endpoint
for the get replies operation typically these are written to a http.Request
*/
type GetRepliesParams struct {

	/*Authorid
	  回复发布者ID

	*/
	Authorid int64
	/*Onlyaccepted
	  是否只显示被采纳的答案

	*/
	Onlyaccepted bool
	/*Page
	  当前页码

	*/
	Page int64
	/*Pagesize
	  每页项数

	*/
	Pagesize int64
	/*Startup
	  是否为企业员工

	*/
	Startup bool
	/*Topicid
	  回复的主题ID

	*/
	Topicid int64
}

// WithAuthorid adds the authorid to the get replies params
func (o *GetRepliesParams) WithAuthorid(authorid int64) *GetRepliesParams {
	o.Authorid = authorid
	return o
}

// WithOnlyaccepted adds the onlyaccepted to the get replies params
func (o *GetRepliesParams) WithOnlyaccepted(onlyaccepted bool) *GetRepliesParams {
	o.Onlyaccepted = onlyaccepted
	return o
}

// WithPage adds the page to the get replies params
func (o *GetRepliesParams) WithPage(page int64) *GetRepliesParams {
	o.Page = page
	return o
}

// WithPagesize adds the pagesize to the get replies params
func (o *GetRepliesParams) WithPagesize(pagesize int64) *GetRepliesParams {
	o.Pagesize = pagesize
	return o
}

// WithStartup adds the startup to the get replies params
func (o *GetRepliesParams) WithStartup(startup bool) *GetRepliesParams {
	o.Startup = startup
	return o
}

// WithTopicid adds the topicid to the get replies params
func (o *GetRepliesParams) WithTopicid(topicid int64) *GetRepliesParams {
	o.Topicid = topicid
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepliesParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// query param authorid
	qrAuthorid := o.Authorid
	qAuthorid := swag.FormatInt64(qrAuthorid)
	if qAuthorid != "" && qAuthorid != "-1" {
		if err := r.SetQueryParam("authorid", qAuthorid); err != nil {
			return err
		}
	}

	// query array param authorid

	// query param onlyaccepted
	qrOnlyaccepted := o.Onlyaccepted
	qOnlyaccepted := swag.FormatBool(qrOnlyaccepted)
	if qOnlyaccepted != "" && qOnlyaccepted != "-1" {
		if err := r.SetQueryParam("onlyaccepted", qOnlyaccepted); err != nil {
			return err
		}
	}

	// query array param onlyaccepted

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" && qPage != "-1" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query array param page

	// query param pagesize
	qrPagesize := o.Pagesize
	qPagesize := swag.FormatInt64(qrPagesize)
	if qPagesize != "" && qPagesize != "-1" {
		if err := r.SetQueryParam("pagesize", qPagesize); err != nil {
			return err
		}
	}

	// query array param pagesize

	// query param startup
	qrStartup := o.Startup
	qStartup := swag.FormatBool(qrStartup)
	if qStartup != "" && qStartup != "-1" {
		if err := r.SetQueryParam("startup", qStartup); err != nil {
			return err
		}
	}

	// query array param startup

	// query param topicid
	qrTopicid := o.Topicid
	qTopicid := swag.FormatInt64(qrTopicid)
	if qTopicid != "" && qTopicid != "-1" {
		if err := r.SetQueryParam("topicid", qTopicid); err != nil {
			return err
		}
	}

	// query array param topicid

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
