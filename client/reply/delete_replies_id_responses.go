package reply

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type DeleteRepliesIDReader struct {
	formats strfmt.Registry
}

func (o *DeleteRepliesIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteRepliesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteRepliesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteRepliesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteRepliesIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteRepliesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteRepliesIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteRepliesIDOK creates a DeleteRepliesIDOK with default headers values
func NewDeleteRepliesIDOK() *DeleteRepliesIDOK {
	return &DeleteRepliesIDOK{}
}

/*DeleteRepliesIDOK

成功删除回复
*/
type DeleteRepliesIDOK struct {
	Payload *models.Reply
}

func (o *DeleteRepliesIDOK) Error() string {
	return fmt.Sprintf("[DELETE /replies/{id}/][%d] deleteRepliesIdOK  %+v", 200, o.Payload)
}

func (o *DeleteRepliesIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Reply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewDeleteRepliesIDBadRequest creates a DeleteRepliesIDBadRequest with default headers values
func NewDeleteRepliesIDBadRequest() *DeleteRepliesIDBadRequest {
	return &DeleteRepliesIDBadRequest{}
}

/*DeleteRepliesIDBadRequest

无效请求
*/
type DeleteRepliesIDBadRequest struct {
	Payload *models.Error
}

func (o *DeleteRepliesIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /replies/{id}/][%d] deleteRepliesIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRepliesIDBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewDeleteRepliesIDUnauthorized creates a DeleteRepliesIDUnauthorized with default headers values
func NewDeleteRepliesIDUnauthorized() *DeleteRepliesIDUnauthorized {
	return &DeleteRepliesIDUnauthorized{}
}

/*DeleteRepliesIDUnauthorized

未认证
*/
type DeleteRepliesIDUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteRepliesIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /replies/{id}/][%d] deleteRepliesIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRepliesIDUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewDeleteRepliesIDForbidden creates a DeleteRepliesIDForbidden with default headers values
func NewDeleteRepliesIDForbidden() *DeleteRepliesIDForbidden {
	return &DeleteRepliesIDForbidden{}
}

/*DeleteRepliesIDForbidden

无访问权限
*/
type DeleteRepliesIDForbidden struct {
	Payload *models.Error
}

func (o *DeleteRepliesIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /replies/{id}/][%d] deleteRepliesIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRepliesIDForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewDeleteRepliesIDNotFound creates a DeleteRepliesIDNotFound with default headers values
func NewDeleteRepliesIDNotFound() *DeleteRepliesIDNotFound {
	return &DeleteRepliesIDNotFound{}
}

/*DeleteRepliesIDNotFound

没找到指定对象
*/
type DeleteRepliesIDNotFound struct {
	Payload *models.Error
}

func (o *DeleteRepliesIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /replies/{id}/][%d] deleteRepliesIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRepliesIDNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewDeleteRepliesIDInternalServerError creates a DeleteRepliesIDInternalServerError with default headers values
func NewDeleteRepliesIDInternalServerError() *DeleteRepliesIDInternalServerError {
	return &DeleteRepliesIDInternalServerError{}
}

/*DeleteRepliesIDInternalServerError

服务端内部错误
*/
type DeleteRepliesIDInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteRepliesIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /replies/{id}/][%d] deleteRepliesIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRepliesIDInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
