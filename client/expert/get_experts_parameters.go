package expert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewGetExpertsParams creates a new GetExpertsParams object
// with the default values initialized.
func NewGetExpertsParams() *GetExpertsParams {
	return &GetExpertsParams{}
}

/*GetExpertsParams contains all the parameters to send to the API endpoint
for the get experts operation typically these are written to a http.Request
*/
type GetExpertsParams struct {

	/*Category
	  专长类别

	*/
	Category int64
	/*Page
	  当前页码

	*/
	Page int64
	/*Pagesize
	  每页项数

	*/
	Pagesize int64
}

// WithCategory adds the category to the get experts params
func (o *GetExpertsParams) WithCategory(category int64) *GetExpertsParams {
	o.Category = category
	return o
}

// WithPage adds the page to the get experts params
func (o *GetExpertsParams) WithPage(page int64) *GetExpertsParams {
	o.Page = page
	return o
}

// WithPagesize adds the pagesize to the get experts params
func (o *GetExpertsParams) WithPagesize(pagesize int64) *GetExpertsParams {
	o.Pagesize = pagesize
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetExpertsParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// query param category
	qrCategory := o.Category
	qCategory := swag.FormatInt64(qrCategory)
	if qCategory != "" && qCategory != "-1" {
		if err := r.SetQueryParam("category", qCategory); err != nil {
			return err
		}
	}

	// query array param category

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" && qPage != "-1" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query array param page

	// query param pagesize
	qrPagesize := o.Pagesize
	qPagesize := swag.FormatInt64(qrPagesize)
	if qPagesize != "" && qPagesize != "-1" {
		if err := r.SetQueryParam("pagesize", qPagesize); err != nil {
			return err
		}
	}

	// query array param pagesize

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
