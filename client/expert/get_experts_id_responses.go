package expert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type GetExpertsIDReader struct {
	formats strfmt.Registry
}

func (o *GetExpertsIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetExpertsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetExpertsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetExpertsIDOK creates a GetExpertsIDOK with default headers values
func NewGetExpertsIDOK() *GetExpertsIDOK {
	return &GetExpertsIDOK{}
}

/*GetExpertsIDOK

成功查询专家
*/
type GetExpertsIDOK struct {
	Payload *models.Expert
}

func (o *GetExpertsIDOK) Error() string {
	return fmt.Sprintf("[GET /experts/{id}/][%d] getExpertsIdOK  %+v", 200, o.Payload)
}

func (o *GetExpertsIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Expert)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewGetExpertsIDNotFound creates a GetExpertsIDNotFound with default headers values
func NewGetExpertsIDNotFound() *GetExpertsIDNotFound {
	return &GetExpertsIDNotFound{}
}

/*GetExpertsIDNotFound

没找到指定对象
*/
type GetExpertsIDNotFound struct {
	Payload *models.Error
}

func (o *GetExpertsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /experts/{id}/][%d] getExpertsIdNotFound  %+v", 404, o.Payload)
}

func (o *GetExpertsIDNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
