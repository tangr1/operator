package employee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new employee API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employee API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*删除创业公司员工

删除指定创业公司员工

*/
func (a *Client) DeleteEmployeesID(params *DeleteEmployeesIDParams, authInfo client.AuthInfoWriter) (*DeleteEmployeesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEmployeesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "DeleteEmployeesID",
		Params:   params,
		Reader:   &DeleteEmployeesIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEmployeesIDOK), nil
}

/*查看创业公司员工列表

查看所有创业公司员工，支持分页和过滤器

*/
func (a *Client) GetEmployees(params *GetEmployeesParams, authInfo client.AuthInfoWriter) (*GetEmployeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetEmployees",
		Params:   params,
		Reader:   &GetEmployeesReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeesOK), nil
}

/*查询创业公司员工

得到指定创业公司员工的具体信息

*/
func (a *Client) GetEmployeesID(params *GetEmployeesIDParams, authInfo client.AuthInfoWriter) (*GetEmployeesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetEmployeesID",
		Params:   params,
		Reader:   &GetEmployeesIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeesIDOK), nil
}

/*创建创业公司员工

根据请求创建创业公司员工

*/
func (a *Client) PostEmployees(params *PostEmployeesParams, authInfo client.AuthInfoWriter) (*PostEmployeesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEmployeesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostEmployees",
		Params:   params,
		Reader:   &PostEmployeesReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEmployeesCreated), nil
}

/*更新创业公司员工

根据请求中指定要更新的属性对创业公司员工进行更新

*/
func (a *Client) PutEmployeesID(params *PutEmployeesIDParams, authInfo client.AuthInfoWriter) (*PutEmployeesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEmployeesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PutEmployeesID",
		Params:   params,
		Reader:   &PutEmployeesIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEmployeesIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
