package misc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new misc API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for misc API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*删除邀请码

删除指定邀请码

*/
func (a *Client) DeleteInvitecodesID(params *DeleteInvitecodesIDParams, authInfo client.AuthInfoWriter) (*DeleteInvitecodesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInvitecodesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "DeleteInvitecodesID",
		Params:   params,
		Reader:   &DeleteInvitecodesIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInvitecodesIDOK), nil
}

/*获取分类信息码表

获取分类信息码表

*/
func (a *Client) GetCodes(params *GetCodesParams, authInfo client.AuthInfoWriter) (*GetCodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCodesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetCodes",
		Params:   params,
		Reader:   &GetCodesReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCodesOK), nil
}

/*获取静态文件列表

获取静态文件列表

*/
func (a *Client) GetDocs(params *GetDocsParams, authInfo client.AuthInfoWriter) (*GetDocsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetDocs",
		Params:   params,
		Reader:   &GetDocsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDocsOK), nil
}

/*查询邀请码

得到指定邀请码的具体信息

*/
func (a *Client) GetInvitecodesID(params *GetInvitecodesIDParams, authInfo client.AuthInfoWriter) (*GetInvitecodesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvitecodesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetInvitecodesID",
		Params:   params,
		Reader:   &GetInvitecodesIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvitecodesIDOK), nil
}

/*拉取通知

拉取通知

*/
func (a *Client) GetNotifications(params *GetNotificationsParams, authInfo client.AuthInfoWriter) (*GetNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetNotifications",
		Params:   params,
		Reader:   &GetNotificationsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNotificationsOK), nil
}

/*检查邮箱地址是否被用

检查邮箱地址是否被用

*/
func (a *Client) HeadEmailsName(params *HeadEmailsNameParams, authInfo client.AuthInfoWriter) (*HeadEmailsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadEmailsNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "HeadEmailsName",
		Params:   params,
		Reader:   &HeadEmailsNameReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HeadEmailsNameOK), nil
}

/*检查电话号码是否被用

检查电话号码是否被用

*/
func (a *Client) HeadPhonesName(params *HeadPhonesNameParams, authInfo client.AuthInfoWriter) (*HeadPhonesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadPhonesNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "HeadPhonesName",
		Params:   params,
		Reader:   &HeadPhonesNameReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HeadPhonesNameOK), nil
}

/*生成邀请码

根据请求生成邀请码

*/
func (a *Client) PostInvitecodes(params *PostInvitecodesParams, authInfo client.AuthInfoWriter) (*PostInvitecodesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInvitecodesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostInvitecodes",
		Params:   params,
		Reader:   &PostInvitecodesReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInvitecodesCreated), nil
}

/*邀请注册

通过邮件或电话邀请注册

*/
func (a *Client) PostInvites(params *PostInvitesParams, authInfo client.AuthInfoWriter) (*PostInvitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInvitesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostInvites",
		Params:   params,
		Reader:   &PostInvitesReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInvitesOK), nil
}

/*发送邮件

发送邮件

*/
func (a *Client) PostSendmail(params *PostSendmailParams, authInfo client.AuthInfoWriter) (*PostSendmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSendmailParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostSendmail",
		Params:   params,
		Reader:   &PostSendmailReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSendmailOK), nil
}

/*更新邀请码

根据请求中指定要更新的属性对邀请码进行更新

*/
func (a *Client) PutInvitecodesID(params *PutInvitecodesIDParams, authInfo client.AuthInfoWriter) (*PutInvitecodesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInvitecodesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PutInvitecodesID",
		Params:   params,
		Reader:   &PutInvitecodesIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutInvitecodesIDOK), nil
}

/*更新通知为已读

更新通知为已读

*/
func (a *Client) PutNotificationsMarkasread(params *PutNotificationsMarkasreadParams, authInfo client.AuthInfoWriter) (*PutNotificationsMarkasreadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNotificationsMarkasreadParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PutNotificationsMarkasread",
		Params:   params,
		Reader:   &PutNotificationsMarkasreadReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutNotificationsMarkasreadOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
