package misc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type PutInvitecodesIDReader struct {
	formats strfmt.Registry
}

func (o *PutInvitecodesIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutInvitecodesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutInvitecodesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutInvitecodesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutInvitecodesIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutInvitecodesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutInvitecodesIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutInvitecodesIDOK creates a PutInvitecodesIDOK with default headers values
func NewPutInvitecodesIDOK() *PutInvitecodesIDOK {
	return &PutInvitecodesIDOK{}
}

/*PutInvitecodesIDOK

成功更新邀请码
*/
type PutInvitecodesIDOK struct {
	Payload *models.InviteCode
}

func (o *PutInvitecodesIDOK) Error() string {
	return fmt.Sprintf("[PUT /invitecodes/{id}/][%d] putInvitecodesIdOK  %+v", 200, o.Payload)
}

func (o *PutInvitecodesIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InviteCode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutInvitecodesIDBadRequest creates a PutInvitecodesIDBadRequest with default headers values
func NewPutInvitecodesIDBadRequest() *PutInvitecodesIDBadRequest {
	return &PutInvitecodesIDBadRequest{}
}

/*PutInvitecodesIDBadRequest

无效请求
*/
type PutInvitecodesIDBadRequest struct {
	Payload *models.Error
}

func (o *PutInvitecodesIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /invitecodes/{id}/][%d] putInvitecodesIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutInvitecodesIDBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutInvitecodesIDUnauthorized creates a PutInvitecodesIDUnauthorized with default headers values
func NewPutInvitecodesIDUnauthorized() *PutInvitecodesIDUnauthorized {
	return &PutInvitecodesIDUnauthorized{}
}

/*PutInvitecodesIDUnauthorized

未认证
*/
type PutInvitecodesIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutInvitecodesIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /invitecodes/{id}/][%d] putInvitecodesIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutInvitecodesIDUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutInvitecodesIDForbidden creates a PutInvitecodesIDForbidden with default headers values
func NewPutInvitecodesIDForbidden() *PutInvitecodesIDForbidden {
	return &PutInvitecodesIDForbidden{}
}

/*PutInvitecodesIDForbidden

无访问权限
*/
type PutInvitecodesIDForbidden struct {
	Payload *models.Error
}

func (o *PutInvitecodesIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /invitecodes/{id}/][%d] putInvitecodesIdForbidden  %+v", 403, o.Payload)
}

func (o *PutInvitecodesIDForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutInvitecodesIDNotFound creates a PutInvitecodesIDNotFound with default headers values
func NewPutInvitecodesIDNotFound() *PutInvitecodesIDNotFound {
	return &PutInvitecodesIDNotFound{}
}

/*PutInvitecodesIDNotFound

没找到指定对象
*/
type PutInvitecodesIDNotFound struct {
	Payload *models.Error
}

func (o *PutInvitecodesIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /invitecodes/{id}/][%d] putInvitecodesIdNotFound  %+v", 404, o.Payload)
}

func (o *PutInvitecodesIDNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutInvitecodesIDInternalServerError creates a PutInvitecodesIDInternalServerError with default headers values
func NewPutInvitecodesIDInternalServerError() *PutInvitecodesIDInternalServerError {
	return &PutInvitecodesIDInternalServerError{}
}

/*PutInvitecodesIDInternalServerError

服务端内部错误
*/
type PutInvitecodesIDInternalServerError struct {
	Payload *models.Error
}

func (o *PutInvitecodesIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /invitecodes/{id}/][%d] putInvitecodesIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PutInvitecodesIDInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
