package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type PostAuthRefreshReader struct {
	formats strfmt.Registry
}

func (o *PostAuthRefreshReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostAuthRefreshOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostAuthRefreshBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostAuthRefreshOK creates a PostAuthRefreshOK with default headers values
func NewPostAuthRefreshOK() *PostAuthRefreshOK {
	return &PostAuthRefreshOK{}
}

/*PostAuthRefreshOK

成功刷新token
*/
type PostAuthRefreshOK struct {
}

func (o *PostAuthRefreshOK) Error() string {
	return fmt.Sprintf("[POST /auth/refresh/][%d] postAuthRefreshOK ", 200)
}

func (o *PostAuthRefreshOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAuthRefreshBadRequest creates a PostAuthRefreshBadRequest with default headers values
func NewPostAuthRefreshBadRequest() *PostAuthRefreshBadRequest {
	return &PostAuthRefreshBadRequest{}
}

/*PostAuthRefreshBadRequest

token无效
*/
type PostAuthRefreshBadRequest struct {
	Payload *models.Error
}

func (o *PostAuthRefreshBadRequest) Error() string {
	return fmt.Sprintf("[POST /auth/refresh/][%d] postAuthRefreshBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthRefreshBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
