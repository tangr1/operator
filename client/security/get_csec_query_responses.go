package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type GetCsecQueryReader struct {
	formats strfmt.Registry
}

func (o *GetCsecQueryReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCsecQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetCsecQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetCsecQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCsecQueryOK creates a GetCsecQueryOK with default headers values
func NewGetCsecQueryOK() *GetCsecQueryOK {
	return &GetCsecQueryOK{}
}

/*GetCsecQueryOK

成功从CSEC拉取验证码
*/
type GetCsecQueryOK struct {
}

func (o *GetCsecQueryOK) Error() string {
	return fmt.Sprintf("[GET /csec/query][%d] getCsecQueryOK ", 200)
}

func (o *GetCsecQueryOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCsecQueryBadRequest creates a GetCsecQueryBadRequest with default headers values
func NewGetCsecQueryBadRequest() *GetCsecQueryBadRequest {
	return &GetCsecQueryBadRequest{}
}

/*GetCsecQueryBadRequest

参数无效
*/
type GetCsecQueryBadRequest struct {
	Payload *models.Error
}

func (o *GetCsecQueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /csec/query][%d] getCsecQueryBadRequest  %+v", 400, o.Payload)
}

func (o *GetCsecQueryBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewGetCsecQueryInternalServerError creates a GetCsecQueryInternalServerError with default headers values
func NewGetCsecQueryInternalServerError() *GetCsecQueryInternalServerError {
	return &GetCsecQueryInternalServerError{}
}

/*GetCsecQueryInternalServerError

请求CSEC失败
*/
type GetCsecQueryInternalServerError struct {
	Payload *models.Error
}

func (o *GetCsecQueryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /csec/query][%d] getCsecQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCsecQueryInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
