package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type PostStsReader struct {
	formats strfmt.Registry
}

func (o *PostStsReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostStsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostStsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostStsOK creates a PostStsOK with default headers values
func NewPostStsOK() *PostStsOK {
	return &PostStsOK{}
}

/*PostStsOK

成功重设
*/
type PostStsOK struct {
	Payload *models.StsResponse
}

func (o *PostStsOK) Error() string {
	return fmt.Sprintf("[POST /sts][%d] postStsOK  %+v", 200, o.Payload)
}

func (o *PostStsOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPostStsBadRequest creates a PostStsBadRequest with default headers values
func NewPostStsBadRequest() *PostStsBadRequest {
	return &PostStsBadRequest{}
}

/*PostStsBadRequest

参数无效
*/
type PostStsBadRequest struct {
	Payload *models.Error
}

func (o *PostStsBadRequest) Error() string {
	return fmt.Sprintf("[POST /sts][%d] postStsBadRequest  %+v", 400, o.Payload)
}

func (o *PostStsBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
