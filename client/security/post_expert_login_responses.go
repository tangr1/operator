package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type PostExpertLoginReader struct {
	formats strfmt.Registry
}

func (o *PostExpertLoginReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostExpertLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostExpertLoginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostExpertLoginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostExpertLoginOK creates a PostExpertLoginOK with default headers values
func NewPostExpertLoginOK() *PostExpertLoginOK {
	return &PostExpertLoginOK{}
}

/*PostExpertLoginOK

成功获取token
*/
type PostExpertLoginOK struct {
	Payload *models.AuthenticationResponse
}

func (o *PostExpertLoginOK) Error() string {
	return fmt.Sprintf("[POST /expert/login/][%d] postExpertLoginOK  %+v", 200, o.Payload)
}

func (o *PostExpertLoginOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPostExpertLoginBadRequest creates a PostExpertLoginBadRequest with default headers values
func NewPostExpertLoginBadRequest() *PostExpertLoginBadRequest {
	return &PostExpertLoginBadRequest{}
}

/*PostExpertLoginBadRequest

请求无效
*/
type PostExpertLoginBadRequest struct {
	Payload *models.Error
}

func (o *PostExpertLoginBadRequest) Error() string {
	return fmt.Sprintf("[POST /expert/login/][%d] postExpertLoginBadRequest  %+v", 400, o.Payload)
}

func (o *PostExpertLoginBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPostExpertLoginUnauthorized creates a PostExpertLoginUnauthorized with default headers values
func NewPostExpertLoginUnauthorized() *PostExpertLoginUnauthorized {
	return &PostExpertLoginUnauthorized{}
}

/*PostExpertLoginUnauthorized

用户名或密码有问题
*/
type PostExpertLoginUnauthorized struct {
	Payload *models.Error
}

func (o *PostExpertLoginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /expert/login/][%d] postExpertLoginUnauthorized  %+v", 401, o.Payload)
}

func (o *PostExpertLoginUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
