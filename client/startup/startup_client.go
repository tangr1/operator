package startup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new startup API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for startup API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*删除创业公司

删除指定创业公司

*/
func (a *Client) DeleteStartupsID(params *DeleteStartupsIDParams, authInfo client.AuthInfoWriter) (*DeleteStartupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStartupsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "DeleteStartupsID",
		Params:   params,
		Reader:   &DeleteStartupsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStartupsIDOK), nil
}

/*查看创业公司列表

查看所有创业公司，支持分页和过滤器

*/
func (a *Client) GetStartups(params *GetStartupsParams, authInfo client.AuthInfoWriter) (*GetStartupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStartupsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetStartups",
		Params:   params,
		Reader:   &GetStartupsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStartupsOK), nil
}

/*查询创业公司

得到指定创业公司的具体信息

*/
func (a *Client) GetStartupsID(params *GetStartupsIDParams, authInfo client.AuthInfoWriter) (*GetStartupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStartupsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetStartupsID",
		Params:   params,
		Reader:   &GetStartupsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStartupsIDOK), nil
}

/*创建创业公司

根据请求创建创业公司

*/
func (a *Client) PostStartups(params *PostStartupsParams, authInfo client.AuthInfoWriter) (*PostStartupsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStartupsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostStartups",
		Params:   params,
		Reader:   &PostStartupsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStartupsCreated), nil
}

/*更新创业公司

根据请求中指定要更新的属性对创业公司进行更新

*/
func (a *Client) PutStartupsID(params *PutStartupsIDParams, authInfo client.AuthInfoWriter) (*PutStartupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutStartupsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PutStartupsID",
		Params:   params,
		Reader:   &PutStartupsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutStartupsIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
