package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	httptransport "github.com/go-swagger/go-swagger/httpkit/client"
	"github.com/go-swagger/go-swagger/spec"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/client/comment"
	"github.com/tangr1/hicto/client/employee"
	"github.com/tangr1/hicto/client/expert"
	"github.com/tangr1/hicto/client/misc"
	"github.com/tangr1/hicto/client/operation"
	"github.com/tangr1/hicto/client/reply"
	"github.com/tangr1/hicto/client/security"
	"github.com/tangr1/hicto/client/startup"
	"github.com/tangr1/hicto/client/topic"
)

// The Default cto funds HTTP client.
var Default = NewHTTPClient(nil)

// NewHTTPClient creates a new cto funds HTTP client.
func NewHTTPClient(formats strfmt.Registry) *CtoFunds {
	swaggerSpec, err := spec.New(SwaggerJSON, "")
	if err != nil {
		// the swagger spec is valid because it was used to generated this code.
		panic(err)
	}
	if formats == nil {
		formats = strfmt.Default
	}
	return New(httptransport.New(swaggerSpec), formats)
}

// New creates a new cto funds client
func New(transport client.Transport, formats strfmt.Registry) *CtoFunds {
	cli := new(CtoFunds)
	cli.Transport = transport

	cli.Comment = comment.New(transport, formats)

	cli.Employee = employee.New(transport, formats)

	cli.Expert = expert.New(transport, formats)

	cli.Misc = misc.New(transport, formats)

	cli.Operation = operation.New(transport, formats)

	cli.Reply = reply.New(transport, formats)

	cli.Security = security.New(transport, formats)

	cli.Startup = startup.New(transport, formats)

	cli.Topic = topic.New(transport, formats)

	return cli
}

// CtoFunds is a client for cto funds
type CtoFunds struct {
	Comment *comment.Client

	Employee *employee.Client

	Expert *expert.Client

	Misc *misc.Client

	Operation *operation.Client

	Reply *reply.Client

	Security *security.Client

	Startup *startup.Client

	Topic *topic.Client

	Transport client.Transport
}

// SetTransport changes the transport on the client and all its subresources
func (c *CtoFunds) SetTransport(transport client.Transport) {
	c.Transport = transport

	c.Comment.SetTransport(transport)

	c.Employee.SetTransport(transport)

	c.Expert.SetTransport(transport)

	c.Misc.SetTransport(transport)

	c.Operation.SetTransport(transport)

	c.Reply.SetTransport(transport)

	c.Security.SetTransport(transport)

	c.Startup.SetTransport(transport)

	c.Topic.SetTransport(transport)

}
