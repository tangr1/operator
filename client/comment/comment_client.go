package comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new comment API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for comment API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*删除评论

删除指定评论

*/
func (a *Client) DeleteCommentsID(params *DeleteCommentsIDParams, authInfo client.AuthInfoWriter) (*DeleteCommentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommentsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "DeleteCommentsID",
		Params:   params,
		Reader:   &DeleteCommentsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCommentsIDOK), nil
}

/*查看评论列表

查看所有评论，支持分页和过滤器

*/
func (a *Client) GetComments(params *GetCommentsParams, authInfo client.AuthInfoWriter) (*GetCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommentsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetComments",
		Params:   params,
		Reader:   &GetCommentsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCommentsOK), nil
}

/*查询评论

得到指定评论的具体信息

*/
func (a *Client) GetCommentsID(params *GetCommentsIDParams, authInfo client.AuthInfoWriter) (*GetCommentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommentsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetCommentsID",
		Params:   params,
		Reader:   &GetCommentsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCommentsIDOK), nil
}

/*创建评论

根据请求创建评论

*/
func (a *Client) PostComments(params *PostCommentsParams, authInfo client.AuthInfoWriter) (*PostCommentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCommentsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostComments",
		Params:   params,
		Reader:   &PostCommentsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCommentsCreated), nil
}

/*更新评论

根据请求中指定要更新的属性对评论进行更新

*/
func (a *Client) PutCommentsID(params *PutCommentsIDParams, authInfo client.AuthInfoWriter) (*PutCommentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCommentsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PutCommentsID",
		Params:   params,
		Reader:   &PutCommentsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCommentsIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
