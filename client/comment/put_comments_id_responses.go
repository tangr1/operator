package comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type PutCommentsIDReader struct {
	formats strfmt.Registry
}

func (o *PutCommentsIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutCommentsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutCommentsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutCommentsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutCommentsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutCommentsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutCommentsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutCommentsIDOK creates a PutCommentsIDOK with default headers values
func NewPutCommentsIDOK() *PutCommentsIDOK {
	return &PutCommentsIDOK{}
}

/*PutCommentsIDOK

成功更新评论
*/
type PutCommentsIDOK struct {
	Payload *models.Comment
}

func (o *PutCommentsIDOK) Error() string {
	return fmt.Sprintf("[PUT /comments/{id}/][%d] putCommentsIdOK  %+v", 200, o.Payload)
}

func (o *PutCommentsIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Comment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutCommentsIDBadRequest creates a PutCommentsIDBadRequest with default headers values
func NewPutCommentsIDBadRequest() *PutCommentsIDBadRequest {
	return &PutCommentsIDBadRequest{}
}

/*PutCommentsIDBadRequest

无效请求
*/
type PutCommentsIDBadRequest struct {
	Payload *models.Error
}

func (o *PutCommentsIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /comments/{id}/][%d] putCommentsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutCommentsIDBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutCommentsIDUnauthorized creates a PutCommentsIDUnauthorized with default headers values
func NewPutCommentsIDUnauthorized() *PutCommentsIDUnauthorized {
	return &PutCommentsIDUnauthorized{}
}

/*PutCommentsIDUnauthorized

未认证
*/
type PutCommentsIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutCommentsIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /comments/{id}/][%d] putCommentsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutCommentsIDUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutCommentsIDForbidden creates a PutCommentsIDForbidden with default headers values
func NewPutCommentsIDForbidden() *PutCommentsIDForbidden {
	return &PutCommentsIDForbidden{}
}

/*PutCommentsIDForbidden

无访问权限
*/
type PutCommentsIDForbidden struct {
	Payload *models.Error
}

func (o *PutCommentsIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /comments/{id}/][%d] putCommentsIdForbidden  %+v", 403, o.Payload)
}

func (o *PutCommentsIDForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutCommentsIDNotFound creates a PutCommentsIDNotFound with default headers values
func NewPutCommentsIDNotFound() *PutCommentsIDNotFound {
	return &PutCommentsIDNotFound{}
}

/*PutCommentsIDNotFound

没找到指定对象
*/
type PutCommentsIDNotFound struct {
	Payload *models.Error
}

func (o *PutCommentsIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /comments/{id}/][%d] putCommentsIdNotFound  %+v", 404, o.Payload)
}

func (o *PutCommentsIDNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutCommentsIDInternalServerError creates a PutCommentsIDInternalServerError with default headers values
func NewPutCommentsIDInternalServerError() *PutCommentsIDInternalServerError {
	return &PutCommentsIDInternalServerError{}
}

/*PutCommentsIDInternalServerError

服务端内部错误
*/
type PutCommentsIDInternalServerError struct {
	Payload *models.Error
}

func (o *PutCommentsIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /comments/{id}/][%d] putCommentsIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PutCommentsIDInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
