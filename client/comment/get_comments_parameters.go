package comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewGetCommentsParams creates a new GetCommentsParams object
// with the default values initialized.
func NewGetCommentsParams() *GetCommentsParams {
	return &GetCommentsParams{}
}

/*GetCommentsParams contains all the parameters to send to the API endpoint
for the get comments operation typically these are written to a http.Request
*/
type GetCommentsParams struct {

	/*Page
	  当前页码

	*/
	Page int64
	/*Pagesize
	  每页项数

	*/
	Pagesize int64
	/*Replyid
	  评论的回复ID

	*/
	Replyid int64
	/*Topicid
	  评论的主题ID

	*/
	Topicid int64
}

// WithPage adds the page to the get comments params
func (o *GetCommentsParams) WithPage(page int64) *GetCommentsParams {
	o.Page = page
	return o
}

// WithPagesize adds the pagesize to the get comments params
func (o *GetCommentsParams) WithPagesize(pagesize int64) *GetCommentsParams {
	o.Pagesize = pagesize
	return o
}

// WithReplyid adds the replyid to the get comments params
func (o *GetCommentsParams) WithReplyid(replyid int64) *GetCommentsParams {
	o.Replyid = replyid
	return o
}

// WithTopicid adds the topicid to the get comments params
func (o *GetCommentsParams) WithTopicid(topicid int64) *GetCommentsParams {
	o.Topicid = topicid
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCommentsParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" && qPage != "-1" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query array param page

	// query param pagesize
	qrPagesize := o.Pagesize
	qPagesize := swag.FormatInt64(qrPagesize)
	if qPagesize != "" && qPagesize != "-1" {
		if err := r.SetQueryParam("pagesize", qPagesize); err != nil {
			return err
		}
	}

	// query array param pagesize

	// query param replyid
	qrReplyid := o.Replyid
	qReplyid := swag.FormatInt64(qrReplyid)
	if qReplyid != "" && qReplyid != "-1" {
		if err := r.SetQueryParam("replyid", qReplyid); err != nil {
			return err
		}
	}

	// query array param replyid

	// query param topicid
	qrTopicid := o.Topicid
	qTopicid := swag.FormatInt64(qrTopicid)
	if qTopicid != "" && qTopicid != "-1" {
		if err := r.SetQueryParam("topicid", qTopicid); err != nil {
			return err
		}
	}

	// query array param topicid

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
