package topic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type PostTopicsReader struct {
	formats strfmt.Registry
}

func (o *PostTopicsReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostTopicsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostTopicsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostTopicsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostTopicsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostTopicsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostTopicsCreated creates a PostTopicsCreated with default headers values
func NewPostTopicsCreated() *PostTopicsCreated {
	return &PostTopicsCreated{}
}

/*PostTopicsCreated

成功创建主题
*/
type PostTopicsCreated struct {
	Payload *models.Topic
}

func (o *PostTopicsCreated) Error() string {
	return fmt.Sprintf("[POST /topics/][%d] postTopicsCreated  %+v", 201, o.Payload)
}

func (o *PostTopicsCreated) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Topic)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPostTopicsBadRequest creates a PostTopicsBadRequest with default headers values
func NewPostTopicsBadRequest() *PostTopicsBadRequest {
	return &PostTopicsBadRequest{}
}

/*PostTopicsBadRequest

无效请求
*/
type PostTopicsBadRequest struct {
	Payload *models.Error
}

func (o *PostTopicsBadRequest) Error() string {
	return fmt.Sprintf("[POST /topics/][%d] postTopicsBadRequest  %+v", 400, o.Payload)
}

func (o *PostTopicsBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPostTopicsUnauthorized creates a PostTopicsUnauthorized with default headers values
func NewPostTopicsUnauthorized() *PostTopicsUnauthorized {
	return &PostTopicsUnauthorized{}
}

/*PostTopicsUnauthorized

未认证
*/
type PostTopicsUnauthorized struct {
	Payload *models.Error
}

func (o *PostTopicsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /topics/][%d] postTopicsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostTopicsUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPostTopicsForbidden creates a PostTopicsForbidden with default headers values
func NewPostTopicsForbidden() *PostTopicsForbidden {
	return &PostTopicsForbidden{}
}

/*PostTopicsForbidden

无访问权限
*/
type PostTopicsForbidden struct {
	Payload *models.Error
}

func (o *PostTopicsForbidden) Error() string {
	return fmt.Sprintf("[POST /topics/][%d] postTopicsForbidden  %+v", 403, o.Payload)
}

func (o *PostTopicsForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPostTopicsInternalServerError creates a PostTopicsInternalServerError with default headers values
func NewPostTopicsInternalServerError() *PostTopicsInternalServerError {
	return &PostTopicsInternalServerError{}
}

/*PostTopicsInternalServerError

服务端内部错误
*/
type PostTopicsInternalServerError struct {
	Payload *models.Error
}

func (o *PostTopicsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /topics/][%d] postTopicsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostTopicsInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
