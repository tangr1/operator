package topic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewGetTopicsParams creates a new GetTopicsParams object
// with the default values initialized.
func NewGetTopicsParams() *GetTopicsParams {
	return &GetTopicsParams{}
}

/*GetTopicsParams contains all the parameters to send to the API endpoint
for the get topics operation typically these are written to a http.Request
*/
type GetTopicsParams struct {

	/*Authorid
	  主题发布者ID

	*/
	Authorid int64
	/*Category
	  主题类别

	*/
	Category string
	/*Page
	  当前页码

	*/
	Page int64
	/*Pagesize
	  每页项数

	*/
	Pagesize int64
	/*Resolved
	  是否已解决问题优先

	*/
	Resolved bool
	/*Startupid
	  创业公司ID

	*/
	Startupid int64
	/*Unresolved
	  是否未解决问题优先

	*/
	Unresolved bool
	/*Wonderful
	  精彩问答数目, 若有此项则其他查询条件无效, 且只返回一页

	*/
	Wonderful int64
}

// WithAuthorid adds the authorid to the get topics params
func (o *GetTopicsParams) WithAuthorid(authorid int64) *GetTopicsParams {
	o.Authorid = authorid
	return o
}

// WithCategory adds the category to the get topics params
func (o *GetTopicsParams) WithCategory(category string) *GetTopicsParams {
	o.Category = category
	return o
}

// WithPage adds the page to the get topics params
func (o *GetTopicsParams) WithPage(page int64) *GetTopicsParams {
	o.Page = page
	return o
}

// WithPagesize adds the pagesize to the get topics params
func (o *GetTopicsParams) WithPagesize(pagesize int64) *GetTopicsParams {
	o.Pagesize = pagesize
	return o
}

// WithResolved adds the resolved to the get topics params
func (o *GetTopicsParams) WithResolved(resolved bool) *GetTopicsParams {
	o.Resolved = resolved
	return o
}

// WithStartupid adds the startupid to the get topics params
func (o *GetTopicsParams) WithStartupid(startupid int64) *GetTopicsParams {
	o.Startupid = startupid
	return o
}

// WithUnresolved adds the unresolved to the get topics params
func (o *GetTopicsParams) WithUnresolved(unresolved bool) *GetTopicsParams {
	o.Unresolved = unresolved
	return o
}

// WithWonderful adds the wonderful to the get topics params
func (o *GetTopicsParams) WithWonderful(wonderful int64) *GetTopicsParams {
	o.Wonderful = wonderful
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetTopicsParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// path param authorid
	if err := r.SetPathParam("authorid", swag.FormatInt64(o.Authorid)); err != nil {
		return err
	}

	// path param category
	if err := r.SetPathParam("category", o.Category); err != nil {
		return err
	}

	// path param page
	if err := r.SetPathParam("page", swag.FormatInt64(o.Page)); err != nil {
		return err
	}

	// path param pagesize
	if err := r.SetPathParam("pagesize", swag.FormatInt64(o.Pagesize)); err != nil {
		return err
	}

	// path param resolved
	if err := r.SetPathParam("resolved", swag.FormatBool(o.Resolved)); err != nil {
		return err
	}

	// path param startupid
	if err := r.SetPathParam("startupid", swag.FormatInt64(o.Startupid)); err != nil {
		return err
	}

	// path param unresolved
	if err := r.SetPathParam("unresolved", swag.FormatBool(o.Unresolved)); err != nil {
		return err
	}

	// path param wonderful
	if err := r.SetPathParam("wonderful", swag.FormatInt64(o.Wonderful)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
