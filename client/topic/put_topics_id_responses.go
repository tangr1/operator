package topic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/tangr1/hicto/models"
)

type PutTopicsIDReader struct {
	formats strfmt.Registry
}

func (o *PutTopicsIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutTopicsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutTopicsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutTopicsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutTopicsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutTopicsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutTopicsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutTopicsIDOK creates a PutTopicsIDOK with default headers values
func NewPutTopicsIDOK() *PutTopicsIDOK {
	return &PutTopicsIDOK{}
}

/*PutTopicsIDOK

成功更新主题
*/
type PutTopicsIDOK struct {
	Payload *models.Topic
}

func (o *PutTopicsIDOK) Error() string {
	return fmt.Sprintf("[PUT /topics/{id}/][%d] putTopicsIdOK  %+v", 200, o.Payload)
}

func (o *PutTopicsIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Topic)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutTopicsIDBadRequest creates a PutTopicsIDBadRequest with default headers values
func NewPutTopicsIDBadRequest() *PutTopicsIDBadRequest {
	return &PutTopicsIDBadRequest{}
}

/*PutTopicsIDBadRequest

无效请求
*/
type PutTopicsIDBadRequest struct {
	Payload *models.Error
}

func (o *PutTopicsIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /topics/{id}/][%d] putTopicsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutTopicsIDBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutTopicsIDUnauthorized creates a PutTopicsIDUnauthorized with default headers values
func NewPutTopicsIDUnauthorized() *PutTopicsIDUnauthorized {
	return &PutTopicsIDUnauthorized{}
}

/*PutTopicsIDUnauthorized

未认证
*/
type PutTopicsIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutTopicsIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /topics/{id}/][%d] putTopicsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutTopicsIDUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutTopicsIDForbidden creates a PutTopicsIDForbidden with default headers values
func NewPutTopicsIDForbidden() *PutTopicsIDForbidden {
	return &PutTopicsIDForbidden{}
}

/*PutTopicsIDForbidden

无访问权限
*/
type PutTopicsIDForbidden struct {
	Payload *models.Error
}

func (o *PutTopicsIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /topics/{id}/][%d] putTopicsIdForbidden  %+v", 403, o.Payload)
}

func (o *PutTopicsIDForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutTopicsIDNotFound creates a PutTopicsIDNotFound with default headers values
func NewPutTopicsIDNotFound() *PutTopicsIDNotFound {
	return &PutTopicsIDNotFound{}
}

/*PutTopicsIDNotFound

没找到指定对象
*/
type PutTopicsIDNotFound struct {
	Payload *models.Error
}

func (o *PutTopicsIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /topics/{id}/][%d] putTopicsIdNotFound  %+v", 404, o.Payload)
}

func (o *PutTopicsIDNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewPutTopicsIDInternalServerError creates a PutTopicsIDInternalServerError with default headers values
func NewPutTopicsIDInternalServerError() *PutTopicsIDInternalServerError {
	return &PutTopicsIDInternalServerError{}
}

/*PutTopicsIDInternalServerError

服务端内部错误
*/
type PutTopicsIDInternalServerError struct {
	Payload *models.Error
}

func (o *PutTopicsIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /topics/{id}/][%d] putTopicsIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PutTopicsIDInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
