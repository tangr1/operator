package topic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new topic API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for topic API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*删除主题

删除指定主题

*/
func (a *Client) DeleteTopicsID(params *DeleteTopicsIDParams, authInfo client.AuthInfoWriter) (*DeleteTopicsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTopicsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "DeleteTopicsID",
		Params:   params,
		Reader:   &DeleteTopicsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTopicsIDOK), nil
}

/*查看主题列表

查看所有主题，支持分页和过滤器

*/
func (a *Client) GetTopics(params *GetTopicsParams, authInfo client.AuthInfoWriter) (*GetTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopicsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetTopics",
		Params:   params,
		Reader:   &GetTopicsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTopicsOK), nil
}

/*查询主题

得到指定主题的具体信息

*/
func (a *Client) GetTopicsID(params *GetTopicsIDParams, authInfo client.AuthInfoWriter) (*GetTopicsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopicsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "GetTopicsID",
		Params:   params,
		Reader:   &GetTopicsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTopicsIDOK), nil
}

/*创建主题

根据请求创建主题

*/
func (a *Client) PostTopics(params *PostTopicsParams, authInfo client.AuthInfoWriter) (*PostTopicsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTopicsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PostTopics",
		Params:   params,
		Reader:   &PostTopicsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTopicsCreated), nil
}

/*更新主题

根据请求中指定要更新的属性对主题进行更新

*/
func (a *Client) PutTopicsID(params *PutTopicsIDParams, authInfo client.AuthInfoWriter) (*PutTopicsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTopicsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:       "PutTopicsID",
		Params:   params,
		Reader:   &PutTopicsIDReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTopicsIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
